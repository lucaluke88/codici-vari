function [ FIS, FISA, locs ] = spectral_analysis( input )
    
    % Costruisco la mappa delle variazioni
    FIS = buildFIS(input);
    
    % Creo un vettore che contiene la variazione globale per ogni livello
    
    FISA = zeros(numero_bande-1,1);
    for k=1:size(FISA,1)
        livello = FIS(:,:,k);
        FISA(k) = sum(livello(:));
    end
    
    % Posso normalizzare i dati tra 0 e 1, tanto mi serve solo sapere la
    % posizione dei picchi di variazione.
    
    FISA = FISA/norm(FISA); 
    [~,locs] = findpeaks(FISA);
    
    % Adesso ho un primo partizionamento. Devo raffinarlo spostando i bordi
    % (tra gruppo e gruppo) in modo tale da minimizzare la varianza interna
    % di ogni gruppo. 
    % Per non complicarci la vita, procediamo così: scegliamo casualmente
    % un bordo e spostiamolo a destra di una posizione (cioè aggiungiamo
    % una banda al gruppo di sinistra). Se la varianza si è ridotta,
    % accetto il cambiamento, altrimenti lo rifiuto.
    % Tento questa operazione N volte, per esempio 1000.
    
    N = 1000; 
    
    for k=1:N
        % varianza intraclasse globale attuale
        varianza_intraclasse = getVarianzaGlobaleIntraClasse(locs,FISA);
        % propongo un nuov
        locs_tmp = locs; % il nuovo partizionamento proposto
        locs_tmp(randi(size(locs,1),1,1)) = locs_tmp(randi(size(locs,1),1,1)) + 1;
        if	getVarianzaGlobaleIntraClasse(locs_tmp,FISA) < varianza_intraclasse
            locs = locs_tmp;
        end
    end
    locs = unique(locs); % togliamo gli indici duplicati (bordi sovrapposti)
end



