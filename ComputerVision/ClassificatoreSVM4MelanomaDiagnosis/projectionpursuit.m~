function [ reducedDataset ] = projectionpursuit( dataset, training_set )
    
    % When selecting between two sets of features in building a classifier,
    % select the set on which the two classes have the most widely separated
    % densities, as measured by the K–L divergence.
    
    dim = size(training_set,1);
    classe_malata =  training_set(1:dim/2,3:end);
    classe_sana =  training_set(dim/2+1:end,3:end);
    
    N = 1000;
    
    % Ad ogni iterazione, scelgo casualmente una feature da levare. Se la
    % divergenza di KL aumenta accetto il cambiamento, altrimenti lo
    % rifiuto.
    
    % Calcolo la distanza di KL all'inizio
    current_dkb = getKullbackLeiblerDistance(classe_sana,classe_malata);
    % tengo traccia delle features che sto salvando e quelle che rimuoverò.
    % mi servirà per il PP
    current_feature_set = ones(size(classe_sana,2),1); % 1 se la feature è inclusa, 0 se è disattivata
    for i=1:N % andrebbe ottimizzato evitando di scegliere più volte la stessa feature
        % variabili temporanee
        current_feature_set_tmp = current_feature_set;
        % k : indice della feature da rimuovere
        k = randi(size(classe_sana,2),1,1);
        current_feature_set_tmp(k) = 0; % la disattivo
        % Costruisco la nuova proposta
        cont = 0;
        for j=1:size(classe_sana,2)
            if current_feature_set_tmp(j) == 1
                cont = cont + 1; % aggiungo feature
                classe_malata_tmp(:,cont) = classe_malata(:,j); %#ok<*AGROW>
                classe_sana_tmp(:,cont) = classe_malata(:,j);
            end
            
        end
        % Verifico se la distanza di KL è aumentata: se sì accetto le
        % modifiche, altrimenti la rifiuto.
        if getKullbackLeiblerDistance(classe_sana_tmp,classe_malata_tmp) > current_dkb
            classe_malata = classe_malata_tmp;
            classe_sana = classe_sana_tmp;
            current_feature_set = current_feature_set_tmp;
        end
        
    end
    
    % Effetto il PP conservando le feature segnalate prima
    cont = 0;
    for z=1:size(dataset)
       if current_feature_set(z) == 1
           cont = cont + 1;
           reducedDataset(:,:,z) =
    end
    
    
end

function Dkb=getKullbackLeiblerDistance(classe_sana,classe_malata)
    
    nFeature = size(classe_sana,2);
    f_sano = sum(classe_sana,1);
    f_malato = sum(classe_malata,1);
    
    
    Hkb_sm = 0;
    Hkb_ms = 0;
    % Per ogni feature...
    for x=1:nFeature
        Hkb_sm = Hkb_sm + f_sano(x) * log(f_sano(x)/f_malato(x));
        Hkb_ms = Hkb_ms + f_malato(x) * log(f_malato(x)/f_sano(x));
    end
    
    Dkb = (Hkb_sm + Hkb_ms)/2;
end