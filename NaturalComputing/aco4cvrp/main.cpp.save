#include "aco.h"

int main()
{
    printLogo();
    // Dati in input --------------------------------------
    ACOVARS.verbose = 0;
    uint16_t nIterazioni = 0;
    uint16_t nTentativiMiglioramento = ACOVARS.tentativiMiglioramento;
    uint16_t costoMiglioreSolPrecedente = 0;

	ACOVARS.grafoCasuale = readIntFromConsole(string("[0] Leggi grafo da file\n[1] Crea grafo casuale\n>> "));

    while(ACOVARS.nVertici == 0)
	{
		ACOVARS.nVertici = getNumberFromConsole(string("Numero di vertici (maggiore di 0): "),'u');
	}

    while(ACOVARS.nAnt == 0)
		ACOVARS.nAnt = getNumberFromConsole(string("Numero di ant (maggiore di 0): "),'u');

	// Allocazione strutture dati --------------------------------------
    vectorUint richieste(ACOVARS.nVertici); // creazione array richieste clienti
    matrixUint pesoArchi(ACOVARS.nVertici, vectorUint(ACOVARS.nVertici));  // matrice pesi
    matrixDouble feromoneArchi(ACOVARS.nVertici, vector<double>(ACOVARS.nVertici)); // matrice feromone
	matrixUint popolazioneSoluzioni(ACOVARS.nAnt); // popolazione soluzioni
    vectorUint costoSoluzioni(ACOVARS.nAnt); // caching costo soluzioni
	AntType coloniaAnt[ACOVARS.nAnt]; // colonia ant

	// Inizializzazione strutture dati --------------------------------------
	if(ACOVARS.grafoCasuale)
	{
		creaGrafoCasuale(richieste, pesoArchi, feromoneArchi);
		bool vuoi_salvare = readIntFromConsole(string("[0] Non salvare il grafo\n[1] Salva il grafo con nome\n>> "));
		if(vuoi_salvare)
		{
			string filename = readStringFromConsole(string("Nome del file: "));
			salva(filename,richieste,pesoArchi);
		}

	}

	else
	{
        string filename = readStringFromConsole(string("Nome del file: "));
		leggiGrafo(filename,richieste, pesoArchi, feromoneArchi);
	}

	// input della capacità
	ostringstream capRequest;
	capRequest << "Capacita (maggiore di " << ACOVARS.maxRichiesta << "): ";

    while(ACOVARS.capacita<ACOVARS.maxRichiesta)
		ACOVARS.capacita = getNumberFromConsole(capRequest.str(),'u');

	initPopolazioneSoluzioni(popolazioneSoluzioni, richieste,pesoArchi);
	updateCacheCostiSoluzioni(popolazioneSoluzioni,pesoArchi,costoSoluzioni);

	// Global update al passo 0 --------------------------------------
	printProposteSoluzioni(popolazioneSoluzioni, costoSoluzioni);
	uint16_t migliorSoluzione = distance(costoSoluzioni.begin(),min_element(costoSoluzioni.begin(),costoSoluzioni.end()));
	costoMiglioreSolPrecedente = costoSoluzioni[migliorSoluzione];
	globalUpdate(migliorSoluzione, costoSoluzioni, popolazioneSoluzioni, feromoneArchi);

    // Criterio di stop?
	while(!criterioStop(nIterazioni,nTentativiMiglioramento))
	{
		printf("Run %u----------------\n",nIterazioni);
		for(uint16_t i=0;i<ACOVARS.nAnt;i++)
        {
            antWalk(coloniaAnt[i],pesoArchi, feromoneArchi, richieste);
        }
        // mutation and local search
        migliorSoluzione = distance(costoSoluzioni.begin(),min_element(costoSoluzioni.begin(),costoSoluzioni.end()));
        localSearch(popolazioneSoluzioni,migliorSoluzione,pesoArchi,richieste,costoSoluzioni);
        // GOTO LINEA 32
        migliorSoluzione = distance(costoSoluzioni.begin(),min_element(costoSoluzioni.begin(),costoSoluzioni.end()));
		printf("La migliore soluzione corrente ha costo %u\n",costomigliorSoluzione);
		if(costoSoluzioni[migliorSoluzione]<costoMiglioreSolPrecedente)
		{
			nTentativiMiglioramento = ACOVARS.tentativiMiglioramento;
			costoMiglioreSolPrecedente = costoSoluzioni[migliorSoluzione];
		}
		else
			--nTentativiMiglioramento; // la soluzione non è migliorata
		globalUpdate(migliorSoluzione,costoSoluzioni, popolazioneSoluzioni, feromoneArchi);
        ++nIterazioni;
	}
}
