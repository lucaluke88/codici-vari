#ifndef ACO_H
#define ACO_H

#include "utils.h"



double getIncrementoFeromone(const uint16_t &orig, const uint16_t &dest, matrixUint &popolazioneSoluzioni)
{
    double incr = 0;
    for(uint16_t i=0; i<popolazioneSoluzioni.size(); i++) // scorro
    {
        uint16_t L = popolazioneSoluzioni[i].size();
        for(uint16_t j=0; j<L-1; j++)
        {
            if(popolazioneSoluzioni[i][j]==orig && popolazioneSoluzioni[i][j+1]==dest)
            {
                incr += (double) ACOVARS.Q / L;
            }
        }
    }
    return incr;
}

void globalUpdate(uint16_t idSolMigliore, vectorUint &costoSoluzioni, matrixUint &popolazioneSoluzioni, matrixDouble &feromoneArchi)
{
    if(ACOVARS.verbose) printf("Soluzione migliore %u con costo %u\n",idSolMigliore,costoSoluzioni[idSolMigliore]);
    // Faccio depositare il feromone
    uint16_t psiSMsize = popolazioneSoluzioni[idSolMigliore].size();
    for(uint16_t j=0; j<psiSMsize-1; j++)
    {
        uint16_t origine = popolazioneSoluzioni[idSolMigliore][j];
        uint16_t destinazione = popolazioneSoluzioni[idSolMigliore][j+1];
        double fInc = getIncrementoFeromone(origine,destinazione,popolazioneSoluzioni);
        if(ACOVARS.verbose) printf("Feromone su arco (%u,%u) orig: %f ",origine,destinazione,feromoneArchi[origine][destinazione]);
        feromoneArchi[origine][destinazione] = (1-ACOVARS.rho) * feromoneArchi[origine][destinazione] + ACOVARS.rho * fInc;
        if(ACOVARS.verbose) printf(" dopo: %f \n",feromoneArchi[origine][destinazione]);
    }
}

void updateCacheCostiSoluzioni(matrixUint &popolazioneSoluzioni,matrixUint &pesoArchi,vectorUint &costoSoluzioni)
{
    for(uint16_t i=0; i<popolazioneSoluzioni.size(); i++)
    {
        // Caching costo soluzione appena generata
        for(uint16_t j=0; j<popolazioneSoluzioni[i].size()-1; j++)
        {
            uint16_t origine = popolazioneSoluzioni[i][j];
            uint16_t destinazione = popolazioneSoluzioni[i][j+1];
            costoSoluzioni[i] += pesoArchi[origine][destinazione];
        }
    }
}

void printProposteSoluzioni(matrixUint &popolazioneSoluzioni, vectorUint &costoSoluzioni)
{
    printf("Create le seguenti proposte di soluzioni:\n");
    for(uint16_t i=0; i<popolazioneSoluzioni.size(); i++)
    {
        printf("Proposta %u: ",i);
        for(uint16_t j=0; j<popolazioneSoluzioni[i].size(); j++)
        {
            printf("%u-",popolazioneSoluzioni[i][j]);
        }
        printf(", di costo %u\n",costoSoluzioni[i]);
    }
}

void printTour(vectorUint &tour)
{
	for(uint16_t j=0; j<tour.size(); j++)
    {
        printf("%u-",tour[j]);
    }
}

//! Corregge soluzioni unfeasible
void fixSoluzione(vectorUint &tour, vectorUint &richieste)
{
    uint16_t caricoTMP = 0;

    // Ciclo per togliere i cappi
    for(uint16_t i=0;i<tour.size()-1;)
	{
		if(tour[i]==tour[i+1])
		{
			tour.erase(tour.begin()+i+1);
		}
		else ++i;
	}

	// Aggiunta all'inizio della sorgente
	if(tour[0]!=0) tour.insert(tour.begin(),0);
	// Ciclo per sistemare le violazioni di capacità
	for(uint16_t i=0; i<tour.size(); i++)
    {
        if(tour[i-1]!=0 && (caricoTMP + richieste[tour[i]])>ACOVARS.capacita)
        {
            tour.insert(tour.begin()+i,0);
            caricoTMP = 0;
        }
        else if(tour[i-1]!=0)
        {
            caricoTMP += richieste[tour[i]];
        }
    }

    if(tour.back()!=0)
		tour.push_back(0);
}

//! Se un tour è feasible per CVRP
bool isFeasible(vectorUint &tour, vectorUint &richieste)
{
    uint16_t caricoTmp = 0;
    for(uint16_t i=0; i<tour.size(); i++)
    {
        if(tour[i]==0) caricoTmp = 0;
        else
        {
            if(caricoTmp + richieste[i] > ACOVARS.capacita)
                return 0;
            else
                caricoTmp += richieste[i];
        }
    }
    return 1;
}

//! Fa lo swap di due coppie di archi
vectorUint TwoOptSwap(const uint16_t &i, const uint16_t &k, vectorUint &tour)
{
    vectorUint new_tour(tour.size());
    // 1. take route[0] to route[i-1] and add them in order to new_route
    for(uint16_t c = 0; c <= i - 1; ++c )
        new_tour[c] = tour[c];
    // 2. take route[i] to route[k] and add them in reverse order to new_route
    int dec = 0;
    for (unsigned int c = i; c <= k; ++c , dec++ )
        new_tour[c] = tour[k - dec];
    // 3. take route[k+1] to end and add them in order to new_route
    for (unsigned int c = k + 1; c < tour.size(); ++c )
        new_tour[c] = tour[c];
    return new_tour;
}

//! Rimuove di volta in volta una coppia di archi e ne crea un'altra per vedere se il costo totale si abbassa
void twoOpt(uint16_t npassi, vectorUint &tour, matrixUint &pesoArchi, vectorUint &richieste)
{
    // repeat until no improvement is made
    uint16_t improve = 0;
    uint16_t best_distance = 0;
    // calcolo il costo corrente del tour
    for(uint16_t i=1; i<tour.size(); i++)
    {
        best_distance += pesoArchi[tour[i-1]][tour[i]];
    }

    while ( improve < npassi ) // 20 passi di miglioramenti
    {
        for(uint16_t i = 0; i < tour.size() - 1; i++ )
        {
            for(uint16_t k = i + 1; k < tour.size(); k++)
            {
                vectorUint new_tour = TwoOptSwap( i, k, tour );
                uint16_t new_distance = 0;
                for(uint16_t i=1; i<new_tour.size(); i++)
                {
                    new_distance += pesoArchi[new_tour[i-1]][new_tour[i]];
                }
                if ((new_distance < best_distance) && isFeasible(new_tour, richieste))
                {
                    // Improvement found so reset
                    improve = 0;
                    copiaVettore(new_tour,tour);
                    best_distance = new_distance;
                }
            }
        }
        ++improve;
    }
}

//! Inizializza un individuo in modo random
void initIndividuo(uint16_t i, matrixUint &popolazioneSoluzioni, vectorUint &richieste,matrixUint &pesoArchi)
{
    printf("Creazione soluzione random %u\n",i);
    vector<uint16_t> tour( boost::counting_iterator<int>( 0 ),
                       boost::counting_iterator<int>( ACOVARS.nVertici ) );
    struct timespec tm;
	clock_gettime( CLOCK_REALTIME, &tm);
	boost::mt19937 generator(tm.tv_nsec);
	boost::uniform_int<> uni_dist;
	boost::variate_generator<boost::mt19937&, boost::uniform_int<> > randomNumber(generator, uni_dist);
    random_shuffle(tour.begin(), tour.end(),randomNumber);
	twoOpt(20,tour,pesoArchi,richieste);
    if(!isFeasible(tour,richieste)) fixSoluzione(tour, richieste);
    copiaVettore(tour,popolazioneSoluzioni[i]);
}

//! Inizializza la popolazione allo step 0
void initPopolazioneSoluzioni(matrixUint &popolazioneSoluzioni, vectorUint &richieste,matrixUint &pesoArchi)
{
    printf("\n");
    for(uint16_t i=0; i<ACOVARS.nAnt; i++)
    {
        thread t(&initIndividuo,ref(i),ref(popolazioneSoluzioni), ref(richieste),ref(pesoArchi));
		t.join();
    }


}

//! Inizializza un grafo casuale
void creaGrafoCasuale(vectorUint &richieste, matrixUint &pesoArchi, matrixDouble &feromoneArchi)
{
    for(uint16_t i = 0; i < ACOVARS.nVertici ; i++)
    {
        // Generazione casuale delle richieste
        if(i>0)
			richieste[i] = randomNumber(ACOVARS.minRichiesta,ACOVARS.maxRichiesta);
		else
			richieste[i] = 0;
        //if(ACOVARS.verbose)
            printf("Assegnata richiesta %u al vertice %u\n",richieste[i],i);

        for(uint16_t j = 0; j < ACOVARS.nVertici ; j++)
        {
            if(i==j) // feromone nullo e peso massimo, così i cappi non verranno mai selezionati
            {
                pesoArchi[i][j] = numeric_limits<uint16_t>::max();
                feromoneArchi[i][j] = 0;
            }
            else
            {
                pesoArchi[i][j] = randomNumber(ACOVARS.minRichiesta,ACOVARS.maxRichiesta);
                feromoneArchi[i][j] = ACOVARS.feromoneIniziale;
            }

            if(ACOVARS.verbose)
                printf("Assegnato peso %u e feromone %f all'arco (%u,%u)\n",pesoArchi[i][j],feromoneArchi[i][j],i,j);
        }
    }
}

bool criterioStop(uint16_t nIter, uint16_t nTentativiMiglioramento)
{
    bool condA = (nIter > ACOVARS.maxIterazioni);	// n max di run
    bool condB = (nTentativiMiglioramento == 0);	// l'ottimo non è migliorato da N run
    if(condA)
        printf("Raggiunto il numero massimo di run\n");
    if(condB)
        printf("Esauriti i tentativi di miglioramento\n");
    return (condA||condB);
}

//! Is the heuristic of Savings where f and g are two parameters.
double savings(const uint16_t i, const uint16_t j, matrixUint &pesoArchi)
{
    uint16_t dist_i_zero = (i!=0)?pesoArchi[i][0]:numeric_limits<uint16_t>::max();
    uint16_t dist_zero_j = (j!=0)?pesoArchi[0][j]:numeric_limits<uint16_t>::max();
    uint16_t 	dist_i_j = (i!=j)?pesoArchi[i][j]:numeric_limits<uint16_t>::max();
    return dist_i_zero + dist_zero_j - ACOVARS.g * dist_i_j + ACOVARS.f * abs(dist_i_zero - dist_zero_j);
}

void BubbleSort(vector<desiderabilitaType> &desiderabilita)
{
    /* elemN è il numero degli elementi del vettore da ordinare */
    uint16_t elemN = desiderabilita.size();
    uint16_t alto;
    for (alto = elemN - 1; alto > 0; alto-- )
    {
        for (int i=0; i<alto; i++)
        {
            if (desiderabilita[i].value>desiderabilita[i+1].value)
            {
                desiderabilitaType tmp = desiderabilita[i];
                desiderabilita[i] = desiderabilita[i+1];
                desiderabilita[i+1] = tmp;
            }
        }
    }
}


uint16_t buildDesiderabilita(AntType &ant, vector<desiderabilitaType> &desiderabilita, matrixUint &pesoArchi, matrixDouble &feromoneArchi)
{
    uint16_t bestVicino = 0;
    double bestValue = 0;
    uint16_t pred = ant.tour.back();
    double desiderabilitaSum = 0;
    for(uint16_t i=0; i<ant.flagVerticiVisitati.size(); i++)
    {
        uint16_t peso = pesoArchi[pred][i];
        double feromone = feromoneArchi[pred][i];
        double savValue = savings(pred,i,pesoArchi);
        double value = pow(feromone,ACOVARS.alfa)+pow(1/peso,ACOVARS.beta)+pow(savValue,ACOVARS.lambda);
        if(pred==i) // cappio
            value = 0;
        // Copio nell'array
        desiderabilita[i].value = value;
        desiderabilita[i].vertice = i;
        // Restituisco il miglior valore
        if(ant.flagVerticiVisitati[i]==0 && value>bestValue)
        {
            bestVicino = i;
            bestValue = value;
        }
        if(ant.flagVerticiVisitati[i]==1)
        {
            desiderabilita[i].value = 0;
        }
        desiderabilitaSum += desiderabilita[i].value;
    }
    BubbleSort(desiderabilita); // ordino l'array in ordine crescente di valore senza perdere i riferimenti ai vertici
    // Normalizzo i valori
    for(uint16_t i=0; i<desiderabilita.size(); i++)
    {
        desiderabilita[i].value = (double) (desiderabilita[i].value / desiderabilitaSum)*100;
    }
    return bestVicino;
}

uint16_t getProssimoVertice(AntType &ant, matrixUint &pesoArchi, matrixDouble &feromoneArchi)
{
    // l'ant decide il prossimo vicino in modo o probabilistico o in modo determininistico
    uint16_t q = randomNumber(1,100);
    // Costruisco la desiderabilità dei vicini
    vector<desiderabilitaType> desiderabilita(ACOVARS.nVertici);
    uint16_t bestVicino = buildDesiderabilita(ant, desiderabilita, pesoArchi, feromoneArchi);


    if(q<= ACOVARS.qzero)
    {
        // vado di exploitation, restituisco il miglior vicino per distanza, feromone e savings
        return bestVicino;
    }
    else
    {
        // vado di exploration, ogni vertice non visitato ha una possibilità di essere scelto come prossimo vertice
        bestVicino = randomNumber(1,100);
        for(uint16_t i=0; i<desiderabilita.size()-1; i++)
        {
            if(bestVicino<desiderabilita[i].value)
                return desiderabilita[i].vertice;
        }
        return desiderabilita[desiderabilita.size()-1].vertice;
    }
}

uint16_t antWalk(AntType &ant, matrixUint &pesoArchi, matrixDouble &feromoneArchi, vectorUint &richieste)
{
    // L'ant deve ripartire da zero, quindi le cancello la memoria interna
    debugPrint("Ant cancella memoria interna\n");
    ant.tour.erase(ant.tour.begin(),ant.tour.end()); // cancello il vecchio tour
    // cancello la memoria dei vertici già visitati
    if(ACOVARS.verbose) printf("Ant cancella vertici visitati\n");
    uint16_t sizeFlag = ant.flagVerticiVisitati.size();
    // Inizializzo le variabili interne delle ant
    if(sizeFlag==0)
    {
        for(uint16_t i=0; i<ACOVARS.nVertici; i++)
        {
            ant.flagVerticiVisitati.push_back(0);
        }
    }
    debugPrint("Ant comincia ad esplorare\n");
    uint16_t pesoTotale = 0;
    // L'ant parte dalla sorgente
    ant.tour.push_back(0);
    uint16_t verticiVisitati = 0;
    while(verticiVisitati<ACOVARS.nVertici-1) // la sorgente non viene inserita tra i vertici visitati
    {
        if(ACOVARS.verbose) printf("Ant %p ha vistato %u vertici\n",(void*) &ant,verticiVisitati);
        uint16_t vicino = getProssimoVertice(ant,pesoArchi,feromoneArchi);
        if(vicino!=0)
        {
            ++verticiVisitati;
            ant.flagVerticiVisitati[vicino] = 1;
        }
        if(ant.caricoCorrente+richieste[vicino] > ACOVARS.capacita)
        {
            ant.tour.push_back(0);
            ant.caricoCorrente = 0;
            pesoTotale += pesoArchi[ant.tour.back()][0];
            // local update del feromone
            feromoneArchi[ant.tour.back()][0] = (1-ACOVARS.rho) * feromoneArchi[ant.tour.back()][0] + ACOVARS.rho * ACOVARS.feromoneIniziale;
        }
        ant.caricoCorrente += richieste[vicino];
        ant.tour.push_back(vicino);
        pesoTotale += pesoArchi[ant.tour.back()][vicino];
    }
    return pesoTotale;
}

void displacementMT(vectorUint &tour, vectorUint &dispTour, uint16_t index, uint16_t lenght)
{
    printf("Index: %u, Lenght: %u\n",index,lenght);
    


}

void aggiornaPopolazione(matrixUint &popolazioneSoluzioni, matrixUint &metaPopolazione, matrixUint &pesoArchi, vectorUint &costiSoluzione)
{
    debugPrint("Aggiornamento popolazione\n");
    vectorUint costiSoluzioneAux;
    if(ACOVARS.verbose) printf("Aggiungo costi pop principale\n");
    for(uint16_t i=0; i<popolazioneSoluzioni.size(); i++)
    {
        uint16_t costo = 0;
        for(uint16_t j=1; j<popolazioneSoluzioni[i].size(); j++)
        {
            uint16_t origine = popolazioneSoluzioni[i][j-1];
            uint16_t destinazione = popolazioneSoluzioni[i][j];
            costo += pesoArchi[origine][destinazione];
        }
        costiSoluzioneAux.push_back(costo);
    }
    debugPrint("Aggiungo costi pop secondaria\n");
    for(uint16_t i=0; i<metaPopolazione.size(); i++)
    {
        uint16_t costo = 0;
        for(uint16_t j=1; j<metaPopolazione[i].size(); j++)
        {
            uint16_t origine = metaPopolazione[i][j-1];
            uint16_t destinazione = metaPopolazione[i][j];
            costo += pesoArchi[origine][destinazione];
        }
        costiSoluzioneAux.push_back(costo);
    }
    // Creazione nuova popolazione
    debugPrint("Creo nuova popolazione\n");
    matrixUint nuovaPopolazione(popolazioneSoluzioni.size(), vectorUint(popolazioneSoluzioni.size()));
    for(uint16_t i=0; i<popolazioneSoluzioni.size(); i++)
    {
        uint16_t currentMin = distance(costiSoluzioneAux.begin(),min_element(costiSoluzioneAux.begin(),costiSoluzioneAux.end()));
        if(currentMin>=popolazioneSoluzioni.size())
        {
            copiaVettore(metaPopolazione[currentMin - popolazioneSoluzioni.size()], nuovaPopolazione[i]);
        }
        else
            copiaVettore(popolazioneSoluzioni[currentMin], nuovaPopolazione[i]);
        costiSoluzioneAux[currentMin] = numeric_limits<uint16_t>::max();
    }

    // P <- nuovaPop
    for(uint16_t i=0; i<popolazioneSoluzioni.size(); i++)
    {
        copiaVettore(nuovaPopolazione[i],popolazioneSoluzioni[i]);
        uint16_t costo = 0;
        for(uint16_t j=1; j<popolazioneSoluzioni[i].size(); j++)
        {
            uint16_t origine = popolazioneSoluzioni[i][j-1];
            uint16_t destinazione = popolazioneSoluzioni[i][j];
            costo += pesoArchi[origine][destinazione];
        }
        costiSoluzione[i] = costo;
    }
}

void randomShuffle(vectorUint &tour,uint16_t inizio, uint16_t fine, vectorUint &richieste)
{
    unsigned seed = chrono::system_clock::now().time_since_epoch().count();
    shuffle (tour.begin()+inizio, tour.begin()+fine, default_random_engine(seed));
    if(!isFeasible(tour,richieste)) fixSoluzione(tour, richieste);
}

void localSearch(matrixUint &popolazioneSoluzioni, uint16_t idBestSol, matrixUint &pesoArchi, vectorUint &richieste, vectorUint &costiSoluzione)
{
    if(ACOVARS.verbose) printf("Local search\n");
    // operatori di muta
    uint16_t sizeMetaPopolazione = 6;
    matrixUint metaPopolazione(sizeMetaPopolazione, vectorUint(sizeMetaPopolazione));
    for(uint16_t i=0; i<sizeMetaPopolazione; i++)
    {
        uint16_t metodo = randomNumber(1,4);
        metaPopolazione[i].erase(metaPopolazione[i].begin(),metaPopolazione[i].end());
        metodo = 1;
        switch(metodo)
        {
            case(1): // DisplacementMT
            {
                vectorUint dispTour(popolazioneSoluzioni[idBestSol].size());
                uint16_t length = randomNumber(1,dispTour.size());
                uint16_t index = randomNumber(1,dispTour.size()-length);
                displacementMT(popolazioneSoluzioni[idBestSol],dispTour,index,length);
                printf("Tour: "); printTour(popolazioneSoluzioni[idBestSol]); printf("\n");
                //if(!isFeasible(dispTour,richieste)) fixSoluzione(dispTour, richieste);
                printf("DisplMT: "); printTour(dispTour); printf("\n");
                exit(0);
                copiaVettore(dispTour,metaPopolazione[i]);
            }
            case(2): // 2Opt
            {
                vectorUint twoOptTour(popolazioneSoluzioni[idBestSol].size());
                copiaVettore(popolazioneSoluzioni[idBestSol],twoOptTour);
                twoOpt(20, twoOptTour, pesoArchi, richieste);
                printf("Tour: "); printTour(popolazioneSoluzioni[idBestSol]); printf("\n");
                if(!isFeasible(twoOptTour,richieste)) fixSoluzione(twoOptTour, richieste);
                printf("twoOptTour: "); printTour(twoOptTour); printf("\n");
                copiaVettore(twoOptTour,metaPopolazione[i]);
            }
            case(3): // RandomShuffle
            {
                vectorUint randomShTour(popolazioneSoluzioni[idBestSol].size());
                copiaVettore(popolazioneSoluzioni[idBestSol],randomShTour);
                randomShuffle(randomShTour,3,6,richieste);
                if(!isFeasible(randomShTour,richieste)) fixSoluzione(randomShTour, richieste);
                printf("Tour: "); printTour(popolazioneSoluzioni[idBestSol]); printf("\n");
                printf("randomShTour: "); printTour(randomShTour); printf("\n");
                copiaVettore(randomShTour,metaPopolazione[i]);
            }
            case(4): // RandomSwap di sottosequenze
            {
                vectorUint randomShTour(popolazioneSoluzioni[idBestSol].size());
                copiaVettore(popolazioneSoluzioni[idBestSol],randomShTour);
                subSeqSwap(randomShTour, uint16_t(2), uint16_t(7), uint16_t(3));
                if(!isFeasible(randomShTour,richieste)) fixSoluzione(randomShTour, richieste);
                printf("Tour: "); printTour(popolazioneSoluzioni[idBestSol]); printf("\n");
                printf("RandomSwap: "); printTour(randomShTour); printf("\n");
                copiaVettore(randomShTour,metaPopolazione[i]);
            }
        }
    }
    // Aggiorniamo P <-- P U MetaPop
    aggiornaPopolazione(popolazioneSoluzioni, metaPopolazione,pesoArchi,costiSoluzione);
}

//! Inizializza un grafo casuale
void leggiGrafo(string filename, vectorUint &richieste, matrixUint &pesoArchi, matrixDouble &feromoneArchi)
{
    vectorString fileContent = readFile(filename);
    std::string* tmptokens;
    tmptokens = string_split(fileContent[0],":");
    ACOVARS.nVertici = stringToInt(tmptokens[1]);
    if(ACOVARS.verbose) cout << "Leggo " << ACOVARS.nVertici << " vertici\n";
    ACOVARS.maxRichiesta = 0;

    // -------------------------------------------
    for(uint16_t i=2; i<2+ACOVARS.nVertici; i++)
    {
        tmptokens = string_split(fileContent[i],",");
        uint16_t domanda = stringToInt(tmptokens[1]);
        ACOVARS.maxRichiesta = max(ACOVARS.maxRichiesta,domanda);
        richieste[i-2] = domanda;
        if(ACOVARS.verbose)
            printf("Assegnata richiesta %u al vertice %u\n",richieste[i-2],i-2);
    }

    ACOVARS.maxPeso = 0;

    for(uint16_t k=0; k<pow(ACOVARS.nVertici,2); k++)
    {
        tmptokens = string_split(fileContent[2+ACOVARS.nVertici+k],",");
        uint16_t i = stringToInt(tmptokens[0]);
        uint16_t j = stringToInt(tmptokens[1]);
        uint16_t p = stringToInt(tmptokens[2]);
        ACOVARS.maxPeso = max(p,ACOVARS.maxPeso);
        if(i==j) // feromone nullo e peso massimo, così i cappi non verranno mai selezionati
        {
            pesoArchi[i][j] = numeric_limits<uint16_t>::max();
            feromoneArchi[i][j] = 0;
        }
        else
        {
            pesoArchi[i][j] = p;
            feromoneArchi[i][j] = ACOVARS.feromoneIniziale;
        }
        if(ACOVARS.verbose)
            printf("Assegnato peso %u all'arco %u,%u\n",pesoArchi[i][j],i,j);
    }
}

//! Esporta il grafo in un file di testo nella cartella corrente
/*!	@param nome il nome del file (sarà seguito dai suffissi rispettivi)
 */
void salva(const string &nome, vectorUint &richieste, matrixUint &pesoArchi)
{
    std::ofstream a_file ( nome );
    a_file<<"NVERTICI:"<< ACOVARS.nVertici << "\n";
    a_file<<"VERTICI (id,domanda)\n";
    for(uint16_t i=0; i<ACOVARS.nVertici; i++)
        a_file<< i <<","<< richieste[i] <<"\n";
    a_file<<"ARCHI (id origine, id destinazione, peso)\n";
    for(uint16_t i=0; i<ACOVARS.nVertici; i++)
    {
        for(uint16_t j=0; j<ACOVARS.nVertici; j++)
        {
            a_file<<	i;
            a_file<<	",";
            a_file<<	j;
            a_file<<	",";
            a_file<<	pesoArchi[i][j]<<"\n";
        }
    }
    a_file.close();
}

#endif // ACO_H
